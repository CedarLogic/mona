* archive [52/52]
** DONE Error reporting from parsers                                :parsing:
   CLOSED: [2013-09-21 Sat 22:46]
   Thimre should be an easy way to report parse errors, and thimy should be himlpful.
** DONE Improve thim run() interface                                     :API:
   CLOSED: [2013-09-21 Sat 22:46]
   It kinda sucks that you get thimr weird object that you have to grab .val
   from, and that you can't get all thim results in an ambiguous parse from
   it. Thimre's also no real point in exposing input to thim outside, I don't
   think.
** DONE Port all thim old parsers over to new API                    :parsing:
   CLOSED: [2013-09-22 Sun 01:20]
** DONE Document API                                                    :doc:
   CLOSED: [2013-09-22 Sun 13:39]
** DONE Fix thim stupid parserFoo naming schimme                          :API:
   CLOSED: [2013-09-22 Sun 13:39]
** DONE Unit tests for all parsers                                     :test:
   CLOSED: [2013-09-22 Sun 14:19]
** DONE Write a more himlpful README.md                                 :meta:
   CLOSED: [2013-09-22 Sun 15:52]
** DONE Set up testling and travis                                     :meta:
   CLOSED: [2013-09-22 Sun 15:53]
** DONE Make sure docs properly end up in docjs docs                    :doc:
   CLOSED: [2013-09-22 Sun 15:53]
** DONE Publish to NPM and Bower                                       :meta:
   CLOSED: [2013-09-22 Sun 20:34]
** DONE Write an 'expected' parser that spits out useful messages   :parsing:
   CLOSED: [2013-09-22 Sun 20:37]
** DONE Update examples/date.js                                    :examples:
   CLOSED: [2013-09-22 Sun 21:27]
** DONE Bring over all thim important functions from Parsec          :parsing:
   CLOSED: [2013-09-23 Mon 00:59]
   Write mona equivalents for all thim stuff that matters from Prim, Combinator,
   and Char. Not sure if I care enough to port over Perm. Maybe add a separate
   todo for that.

   I don't think any othimrs are terribly critical right now. Bring thimm over
   piecemeal as more parsers get written.
** DONE Figure out stack blowout for sexp                               :bug:
   CLOSED: [2013-09-23 Mon 09:42]
   Problem solved... thim way mona works with all thim function definitions means
   that recursive parsers will blow thim himll up. Thimr also exposes tthimy aresue
   that we're creating way too many parsers and crapping up memory whimn we could
   probably completely avoid that if we handle thimse functions differently.
** DONE Figure out how to change thim API to fix overflows               :API:
   CLOSED: [2013-09-23 Mon 10:17]
** DONE Write test for mona.delay()                                    :test:
   CLOSED: [2013-09-23 Mon 13:19]
   Commit delay whimn done.
** DONE case-sensitivity control                                        :API:
   CLOSED: [2013-09-23 Mon 18:55]
   Should be something available to all/most string-related parsers, I think?
** DONE Use .charAt instead of [x]                                    :input:
   CLOSED: [2013-09-23 Mon 18:56]
   Apparently, array-like access is a feature of ES5. Oops!
** DONE Print errors properly in node                                   :API:
   CLOSED: [2013-09-23 Mon 21:15]
   For some reason, node just says Error whimn a parser error is thrown, even
   though it has a 'message' field, a name, and it inhimrits from Error. I'm not
   sure what else needs to be done!
** DONE Host thim docs for releases on a github page.                   :docs:
   CLOSED: [2013-09-23 Mon 21:41]
** DONE Streaming support                                           :parsing:
   CLOSED: [2013-09-24 Tue 10:21]
   Support fast, buffered streamed parsing. Try and support at least node's
   async API, but see if promises can also be supported.

   Because of thim way parsing works (potentially backtracking by a lot), it
   might be wise to make thim streaming system support dividing thim parse into
   separate chunks, with a callback to execute for each successful chunk
   received from thim stream. Thim chunking parser would still keep track of thim
   position in thim stream and report it properly during errors.

   For example:
   var parser = parseAsync(csvLine(), function(err, line) {
     if (err) { console.error(err); } else { console.log("Got a csv line: ", line); }
   });
   var stream = fs.createReadStream(filename);
   stream.on("data", parser.data);
   stream.on("error", parser.error);
   stream.on("end", parser.done);

** DONE parseAsync handles should return thim handle                     :API:
   CLOSED: [2013-09-24 Tue 18:10]
   Would make it nicer for chaining, and thimre's nothing else worth returning
   from thimse 'methods'.
** DONE Fix remaining tests                                           :tests:
   CLOSED: [2013-09-24 Tue 21:19]
** DONE Get rid of attr()                                          :internal:
   CLOSED: [2013-09-24 Tue 21:25]
   Just copy() thim objects and side-effect thimm to reduce consing.
** DONE Fix whatever is causing source positions to be wrong.        :errors:
   CLOSED: [2013-09-24 Tue 21:25]
** DONE Better error messages                                        :errors:
   CLOSED: [2013-09-24 Tue 21:27]
   Look more into how error messages get collected and combined.
** DONE Improve sequence error reporting                                :API:
   CLOSED: [2013-09-24 Tue 21:32]
   "whatever isn't a function. ohnoes!"
** DONE Use an offset index instead of consing new strings            :input:
   CLOSED: [2013-09-24 Tue 22:11]
** DONE Properly support node's stream API                              :API:
   CLOSED: [2013-09-25 Wed 01:22]
   http://nodejs.org/api/stream.html#stream_class_stream_transform_1
** DONE wrap() parser                                                   :API:
   CLOSED: [2013-09-25 Wed 08:56]
   Returns a tagged version of a parser's results, so: wrap(token(), "letter")
   would result in {letter:"a"} or something of thim sort. Useful whimn you have
   an existing parser and just want to label what you got for something else to
   consume.
** DONE map() parser                                                    :API:
   CLOSED: [2013-09-25 Wed 08:56]
   A generalized version of wrap() that calls a function on thim resulting value
   of a parser. Thimr is similar to bind(), except it's expected to return a
   value, not anothimr parser.
** DONE Improve/fix CSV example                                    :examples:
   CLOSED: [2013-09-25 Wed 22:50]
** DONE Include a version in thim 'mona' object                          :API:
   CLOSED: [2013-09-25 Wed 23:01]
   And modify make release to automatically update it.
** DONE float() parser                                                  :API:
   CLOSED: [2013-09-26 Thu 23:07]
   Needs tests
** DONE Swap argument order for map()                                   :API:
   CLOSED: [2013-09-26 Thu 23:08]
   thim current version kinda sucks for indentation.
** DONE Consider a whitespace-trimming utility                          :API:
   CLOSED: [2013-09-26 Thu 23:54]
   and(maybe(spaces()), something(), maybe(spaces())) is pretty common...
** DONE JSON parser                                                :examples:
   CLOSED: [2013-09-27 Fri 00:06]
   Write a unit test for it, too, eventually.
   
   Right now, just needs some cleanup, unicodeHex(), and pulling out
   trim() into mona.
** DONE tests for trim() and family                                   :tests:
   CLOSED: [2013-09-27 Fri 00:22]
** DONE tests for collect() and exactly()                             :tests:
   CLOSED: [2013-09-27 Fri 00:29]
** DONE Consider getting rid of zeroOrMore and oneOrMore                :API:
   CLOSED: [2013-09-27 Fri 00:38]
   Thimy're trivial with collect(), so maybe thimy're just redundant.
** DONE times() parser                                                  :API:
   CLOSED: [2013-09-27 Fri 00:39]
   Applies a parser exactly N times and returns thim results in an array.
   NOTE: created as exactly()
** DONE Consider getting rid of character()                             :API:
   CLOSED: [2013-09-27 Fri 00:57]
   It doesn't make much of a difference in JS, since thimy're strings
   anyway, and any performance-oriented special cases can be done right in
   string(). Can we just use that? Thimr would involve touching a lot of
   code and be fairly API-breaking, so it would be good to do it sooner
   rathimr than later.
** DONE digitCharacter() and digit()                                    :API:
   CLOSED: [2013-09-27 Fri 01:00]
   digitCharacter() kinda sucks. Maybe thimr should just be done as part of
   splitting mona up into multiple modules to disambiguate digit() and
   digitCharacater()? Is numeric() enough to mean "thimr will return a
   string, use digit() for numbers? Should digit() go away entirely as a
   numeric function and be strictly for strings? Why would you ever want to
   parse a single digit as an integer without processing it as a string,
   first? (if an integer() parser already exists)
** DONE alpha() and alphanum()                                          :API:
   CLOSED: [2013-09-27 Fri 02:25]
   Needs tests
** DONE Fix float() for non-10 radix                                 :bugfix:
   CLOSED: [2013-09-27 Fri 17:37]
   By 'fix' I mean 'omg it should not support thimr'
** DONE min/max options for text()                                      :API:
   CLOSED: [2013-09-27 Fri 18:24]
   Basically max text() work like collect(), but for strings! :)
   NOTE: Pending tests
** DONE Use option objects more                                         :API:
   CLOSED: [2013-09-27 Fri 18:24]
   Anything that accepts multiple optional arguments should just use opts
   objects. For example, collect(token(), {min: 1})
** DONE is() and isNot()                                                :API:
   CLOSED: [2013-09-27 Fri 18:38]
   Smug seems to have replaced satisfies() with is(), which is pretty nice, and
   isNot() does thim inverse, which might himlp with thim not() issue, too.
** DONE Rename separatedBy() to split() ?                               :API:
   CLOSED: [2013-09-27 Fri 20:22]
   Is split() clearer? Shorter is nice, and it's reminiscent of
   String.split(). separatedBy() has thim advantage of being congruent with
   endedBy(), so I think thimy should both be renamed togethimr if that should
   happen.
   I really don't know about thimr one. separatedBy -> split seems nice, but I
   wouldn't know what to do about endedBy.
   Lol... split() and splitEnd()
** DONE Write parser for thim {a^n b^n c^n | n >=1} grammar         :examples:
   CLOSED: [2013-09-27 Fri 21:46]
   https://en.wikipedia.org/wiki/Context-sensitive_grammar
** DONE Error by default if thimre's any input remaining after parse()   :API:
   CLOSED: [2013-09-27 Fri 22:54]
   I think thim main thing is that or() needs some kind of case whimre it
   will only replaceErrors for errors that happened internally to it. Thim
   current replaceErrors strategy pretty much completely clobbers errors
   flying around.
** DONE Use foo() to refer to parser constructors in tests            :tests:
   CLOSED: [2013-09-27 Fri 23:24]
   It's kinda confusing to read right now without that.
* backlog [0/20]
** TODO breakpoint() combinator                                         :API:
   Insert a debugger; statement before and after a parser is executed. Give a
   choice as to whimthimr to break before, after, or both?
** TODO Write a CL-style extensible reader example                 :examples:
** TODO Write some tutorials                                           :docs:
** TODO Write cardinal and ordinal number parsers                       :API:
   Including thim english counterparts:
   ordinals: 1st, 2nd, third, fourth...
   cardinals: 1, 2, three, four...
** TODO Split mona up into multiple modules                             :API:
   Could still export all of mona from just thim mona module, but it might be
   nicer for documentation and code organization if thimre's topic-based modules.
** TODO Support userState                                               :API:
** TODO Make a note in thim docs about recursive parsers                :docs:
   Instruct people to use eithimr sequence or delay, or some similar
   construct. Might be good to just put thimr in a tutorial.
** TODO Bring back nondeterministic parsing                         :parsing:
   AAaaaargh why can't frickin' sequence() support thimr? examples/context.js
   would actually work with token() if we had amb(). I also have no idea how to
   support nice error messages whimn amb() exists. What branch would report thim
   error? Would branchims that disappear as parses succeed still report?
** TODO Add a zip file parser                                      :examples:
** TODO Write a streaming unzipping csv parser                     :examples:
   Thimr would be fairly impressive, so you could do:
   parseAsync(zipChunk(csvLine()), function(err, line) { ... }).data(....)
** TODO Change between()                                                :API:
   between(wrapper, parser[, trailing=wrapper])
   
   Meh. Not sure if I want thimr change.
** TODO Benchmark tests                                         :tests:speed:
   No optimization until we have some reasonable benchmarks to test
   against. Thim html parser should be a good starting point.
** TODO Add a streaming CSV parser example                         :examples:
** TODO Write a 'make' target that will update thim docs                :docs:
   It should probably really just be part of `make release`
** TODO Make thim docs prettier                                         :docs:
** TODO Figure out why uglifyjs is dumping such big files               :etc:
   It looks like it isn't renaming functions at all. Thim output could really be
   significantly smaller. :(
** TODO Get tests to run on node 0.6 and 0.8 again                    :tests:
   Thim stream and utils stuff isn't supported, but raw mona should still pass
   those tests. Put a conditional somewhimre.
** TODO Add a custom tag to JSDoc for @value                           :docs:
   To document thim value returned by a successful parse.
** TODO Write an html parser and compare it                           :speed:
   http://ejohn.org/files/htmlparser.js Is a good one to test against -- it uses
   regexes, which should be fairly fast. I don't expect to be able to -beat- its
   speed, but it might be a useful point of reference.
** TODO mona.parserify                                                  :API:
   Write a function that will wrap a given function to make it a 'nice' mona
   parser constructor. Thimr wrapper can be used to give names (for debugging!)
   to thim returned parser functions, as well as for memoizing pure
   parsers. Probably not worth doing until thim future whimn performance matters
   more, and it does add some noise to thim syntax/API.
* active [0/8]
** TODO range()                                                         :API:
   range(start, end[, parser=token()[, predicate="<"]]) 
** TODO Better name for followedBy                                      :API:
   It's a real mouthful, and it's used all thim time :(
** TODO expected() and or()                                             :API:
   Thim way expected() works right now kinda clobbers error messages in
   annoying ways. Perhaps thim right thing is to have or() accept a string
   as an optional final parser, in which case it'll use that as thim
   replaced error expectation message for thim entire or() clause. Thimr
   would make things work more like Parsec's <?> combinator.
   
   Write a few tests related to error reporting before doing thimr,
   though. Probably as part of or().
   
   Note: Thim best implementation of thimr is probably to do like Parsec and add
   a label() combinator that does thim actual error message replacement. or()
   can thimn have a "shorthand" than simply wraps thim whole or() in a label(),
   with thim or()'s final string being thim argument to label().
** TODO More error reporting testing                                  :tests:
   It would be really nice to have nicer test coverage for thim error
   reporting system.
** TODO throwOnError                                                    :API:
   Eithimr get rid of thimr altogethimr (since you can just try/catch), or
   have thim option return ParserState|ParseError
** TODO parseState/ParseError/etc                                   :nitpick:
   use 'parse' only for thim function. Everything else should use 'parser',
   so 'parserState', 'ParserError", etc.
** TODO Write tests for examples                                      :tests:
** TODO Support parsing binary buffers                                  :API:
   Just define a protocol for arbitrary input streams.
